
This product implements a pipeline to generate the MGI GFF3 file and related byproducts.
This is a reimplementation of the original MGI GFF3 process. 
The main goals were to be more modular, light weight, and easier to understand and maintain.
An additional benefit is that the script is highly parallelizable, although that's not been done.

The new process is divided into distinct phases. The download phase obtains "raw" data from a provider, e.g. via ftp.
Providers use different conventions to encode gene models.
The prep phase processes the downloaded files to smooth out these quirks and produce a set of standardized gff3 files.
The merge phase then merges these files, and merges the models within them. The result is the MGI.gff file.

To run the pipeline from start to finish:
    $ refresh.sh

To run individual step(s):
    $ refresh.sh name [name ...]

Valid names are: mgi, ncbi, ensembl, mirbase, mgicomputed, merge, exome, agr, distrib
Naming a provider runs its prep script. 
A typical prep script massages the downloaded gff3 file to generate one in a standardized format. 
(See scripts named "prepXxx.py" where Xxx is a provider name, e.g "prepNcbi.py".) 
The prep'd gff3's are split into separate files by chromosome. (e.g., ncbi.chr6.gff)
    * download - (TODO) files are downloaded/generated into a data directory. This phase is currently diabled; you have to point it to an already populated data directory.
    * ncbi, ensembl, mirbase - these prep scripts massage the gff3 file that was downloaded to the data directory
    * mgi - this prep script queries MGI and writes a gff3 file of genes
    * mgicomputed - this prep script computes models for genes that don't have a provider model
	1. Queries MGI for genes without a model (no model ID attached). 
	   Also gets associated sequences (IDs) where the seqs meet certain minimum requirements. 
	2. Takes the sequence IDs from step 1 and fetches the actual sequences from NCBI.
	3. Blats each sequence from step 2 against the mouse assembly.
	4. Filters the alignments from step 3 for uniqueness and overall quality.
	5. Combines the alignments from step 4 with the associated genes from step 1. Generates a gff3 file
	   of computed models. The models have 3 levels:
	      1. gene - the MGI gene. 
	      2. match - corresponds to one sequence alignment. Can be multiple for a gene (different sequences).
	      3. match_part - a block within the alignment. Often multiple for an alignments.
The other names run that part of the pipeline:
    * merge - the prep'd gff3 models are merged (and the models within them are also merged) by chromosome (see merge.py). Outputs one file per chromosome (e.g., chr6.gff). Also concatenates the chromosomes to generate MGI.gff3. Also generates statistics (countPCrels.py, generates MGI.counts.txt)
    * exome - the MGI exome (MGI.exome.gff3) file is generated from MGI.gff3 (see exome.py)
    * agr - the AGR file (MGI.agr.gff) is generated from MGI.gff3
    * distrib - the output files are copied to the distribution directory. Any archive handling would also go here.


Opportunities for parallelism. (The most obvious ones.)
* the downloads can be done in parallel (by provider)
* the prep steps can be done in parallel (by provider)
* the merging can be done in parallel (by chromosome)
* the exome and agr files can be generated in parallel.
* one improvement would be to keep everything split into separate files by chromosome until the last possible moment.
It would also be possible to split each chromosome file into pieces and process them separately.

